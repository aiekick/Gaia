cmake_minimum_required(VERSION 3.1)

set(PROJECT Gaia)
enable_language(C CXX)
set(PROJECT_VER 0.1.0)

project(
	${PROJECT} 
	VERSION ${PROJECT_VER})

enable_language(C CXX)

option(GAIA_DEBUG_PRINT "Enable debug print of Gaia" OFF) 
option(USE_PROFILERS "Enable the use of profilers. affect the reset of  Command Buffers" ON)

set(GAIA_PROFILER_INCLUDE "Tracy Profiler Include file" CACHE FILEPATH "${PROFILER_INCLUDE}")
set(GAIA_STB_IMAGE_INCLUDE "Stb Image Include file" CACHE FILEPATH "${STB_IMAGE_INCLUDE}")
set(GAIA_STB_IMAGE_WRITE_INCLUDE "Stb Image Write Include file" CACHE FILEPATH "${STB_IMAGE_WRITE_INCLUDE}")
set(GAIA_STB_IMAGE_RESIZE_INCLUDE "Stb Image Resize Include file" CACHE FILEPATH "${STB_IMAGE_RESIZE_INCLUDE}")

if(USE_SHARED_LIBS)
	set(BUILD_SHARED_LIBS ON CACHE BOOL "" FORCE)
	set(LLVM_USE_CRT_DEBUG MDd CACHE STRING "" FORCE)
	set(LLVM_USE_CRT_MINSIZEREL MD CACHE STRING "" FORCE)
	set(LLVM_USE_CRT_RELEASE MD CACHE STRING "" FORCE)
	set(LLVM_USE_CRT_RELWITHDEBINFO MD CACHE STRING "" FORCE)
	set(USE_MSVC_RUNTIME_LIBRARY_DLL ON CACHE BOOL "")
else()
	set(BUILD_SHARED_LIBS OFF CACHE BOOL "" FORCE)
	set(LLVM_USE_CRT_DEBUG MTd CACHE STRING "" FORCE)
	set(LLVM_USE_CRT_MINSIZEREL MT CACHE STRING "" FORCE)
	set(LLVM_USE_CRT_RELEASE MT CACHE STRING "" FORCE)
	set(LLVM_USE_CRT_RELWITHDEBINFO MT CACHE STRING "" FORCE)
	set(USE_MSVC_RUNTIME_LIBRARY_DLL OFF CACHE BOOL "")
endif()

if (USE_PROFILERS)
	add_definitions(-DUSE_PROFILERS)
endif()

set(GAIA_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/include PARENT_SCOPE)

include(cmake/vkheaders.cmake)
include(cmake/glfw.cmake)
include(cmake/glslang.cmake)
include(cmake/ezlibs.cmake)
include(cmake/imguipack.cmake)

file(GLOB_RECURSE PROJECT_SRC_RECURSE 
	${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp 
)
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR}/src PREFIX src FILES ${PROJECT_SRC_RECURSE})

file(GLOB_RECURSE PROJECT_INC_RECURSE 
	${CMAKE_CURRENT_SOURCE_DIR}/include/*.h 
)
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR}/include PREFIX include FILES ${PROJECT_INC_RECURSE})

file(GLOB_RECURSE PROJECT_CMAKE_FILES
		${CMAKE_CURRENT_SOURCE_DIR}/cmake/*.cmake)
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR}/cmake PREFIX cmake FILES ${PROJECT_CMAKE_FILES})

if(UNIX)
	if(APPLE)
		add_definitions(-DAPPLE)
	else()
		add_definitions(-DLINUX)
	endif()
	add_definitions(-DUNIX)
elseif(WIN32)
	add_definitions(-DWIN32)
	if(MINGW)
		add_definitions(-DMINGW32)
	endif()
endif()

if(MSVC)
    #set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4 ")
	add_definitions(-D__STDC__)
	add_definitions(-DMSVC)
	add_definitions(-D_CRT_SECURE_NO_WARNINGS)
	add_definitions(-D_CRT_SECURE_NO_DEPRECATE)
	add_definitions(-DNOMINMAX) ## for avoid issue regarding std::max and std::min
else ()
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -Wpedantic -std=c++17") ## -std=gnu++0x
endif ()

add_definitions(-DVULKAN)

## disabling the static dispatcher of Vulkan HPP
add_definitions(-DVK_NO_PROTOTYPES)

## Vulkan HPP, default dispatcher is dynamic
add_definitions(-DVULKAN_HPP_DISPATCH_LOADER_DYNAMIC=1)

## for prevent cast issues betwwen vk:: and VK if compiling a 32 bits version
add_definitions(-DVULKAN_HPP_TYPESAFE_CONVERSION=1) 

if (USE_SHARED_LIBS)
	set(USE_MSVC_RUNTIME_LIBRARY_DLL ON CACHE BOOL "" FORCE)
	add_library(${PROJECT} ${PROJECT_SRC_RECURSE} ${PROJECT_INC_RECURSE} ${PROJECT_CMAKE_FILES} ${EZ_LIBS_SOURCES})
	target_compile_definitions(${PROJECT} INTERFACE BUILD_GAIA_SHARED_LIBS)
	target_compile_definitions(${PROJECT} PRIVATE BUILD_CTOOLS_SHARED_LIBS)	
	target_compile_definitions(${PROJECT} PRIVATE BUILD_IMGUI_PACK_SHARED_LIBS)
	set_target_properties(${PROJECT} PROPERTIES	RUNTIME_OUTPUT_DIRECTORY "${FINAL_BIN_DIR}")
	set_target_properties(${PROJECT} PROPERTIES POSITION_INDEPENDENT_CODE ON)
else()
	set(USE_MSVC_RUNTIME_LIBRARY_DLL OFF CACHE BOOL "" FORCE)
	add_library(${PROJECT} STATIC ${PROJECT_SRC_RECURSE} ${PROJECT_INC_RECURSE} ${PROJECT_CMAKE_FILES} ${EZ_LIBS_SOURCES})
endif()

if(USE_DEBUG_SANITIZER)
	target_compile_options(${PROJECT} PRIVATE $<$<CONFIG:Debug>:-fsanitize=address -static-libasan>)
	target_link_options(${PROJECT} PRIVATE $<$<CONFIG:Debug>:-fsanitize=address -static-libasan>)
	message("Address Sanitizer enabled for projet ${PROJECT}")
endif()

if (GAIA_DEBUG_PRINT)
	add_compile_definitions(${PROJECT} PRIVATE PRINT_BLOCK_DATAS)
endif()

target_link_libraries(${PROJECT} 
	${GLFW_LIBRARIES}
	${TRACY_LIBRARIES}
	${CTOOLS_LIBRARIES}
	${GLSLANG_LIBRARIES}
	${FREETYPE_LIBRARIES}
	${TINYXML2_LIBRARIES}
	${IMGUIPACK_LIBRARIES}
)

target_include_directories(${PROJECT} PRIVATE
	${GLFW_INCLUDE_DIR}
	${TRACY_INCLUDE_DIR}
	${CTOOLS_INCLUDE_DIR}
	${GLSLANG_INCLUDE_DIRS}
	${FREETYPE_INCLUDE_DIR}
	${IMGUIPACK_INCLUDE_DIRS} 
	${VULKAN_HEADERS_INCLUDE_DIR}
	${CMAKE_CURRENT_SOURCE_DIR}/include
	${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/glm
)

set(GLFW_INCLUDE_DIR ${GLFW_INCLUDE_DIR} PARENT_SCOPE)
set(CTOOLS_INCLUDE_DIR ${CTOOLS_INCLUDE_DIR} PARENT_SCOPE)
set(FREETYPE_INCLUDE_DIR ${FREETYPE_INCLUDE_DIR} PARENT_SCOPE)
set(GLSLANG_INCLUDE_DIRS ${GLSLANG_INCLUDE_DIRS} PARENT_SCOPE)
set(IMGUIPACK_INCLUDE_DIRS ${IMGUIPACK_INCLUDE_DIRS} PARENT_SCOPE)
set(Vulkan_INCLUDE_DIRS ${VULKAN_HEADERS_INCLUDE_DIR} PARENT_SCOPE)

set(GLFW_LIBRARIES ${GLFW_LIBRARIES} PARENT_SCOPE)
set(CTOOLS_LIBRARIES ${CTOOLS_LIBRARIES} PARENT_SCOPE)
set(GLSLANG_LIBRARIES ${GLSLANG_LIBRARIES} PARENT_SCOPE)
set(FREETYPE_LIBRARIES ${FREETYPE_LIBRARIES} PARENT_SCOPE)
set(IMGUIPACK_LIBRARIES ${IMGUIPACK_LIBRARIES} PARENT_SCOPE)

set_target_properties(${PROJECT} PROPERTIES LINKER_LANGUAGE CXX)

set(${PROJECT}_Output_Name "${PROJECT}$<$<CONFIG:Debug>:d>")
set_target_properties(${PROJECT} PROPERTIES	OUTPUT_NAME "${${PROJECT}_Output_Name}")

set_target_properties(glfw PROPERTIES OUTPUT_NAME "glfw3$<$<CONFIG:Debug>:d>")

set(GAIA_INCLUDE_DIRS 
	${GLFW_INCLUDE_DIR} 
	${TRACY_INCLUDE_DIR} 
	${CTOOLS_INCLUDE_DIR} 
	${GLSLANG_INCLUDE_DIRS} 
	${IMGUIPACK_INCLUDE_DIRS} 
	${VULKAN_HEADERS_INCLUDE_DIR} 
	${CMAKE_CURRENT_SOURCE_DIR}/include
	${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/glm
PARENT_SCOPE)

set(GAIA_LIBRARIES 
	${PROJECT} 
	${GLFW_LIBRARIES}
	${TRACY_LIBRARIES}
	${CTOOLS_LIBRARIES}
	${GLSLANG_LIBRARIES}
	${FREETYPE_LIBRARIES}
	${TINYXML2_LIBRARIES}
	${IMGUIPACK_LIBRARIES}
PARENT_SCOPE)

set(GAIA_LIB_DIR ${CMAKE_CURRENT_BINARY_DIR} PARENT_SCOPE)
