include(FindPythonInterp)
execute_process(
	COMMAND ${PYTHON_EXECUTABLE} update_glslang_sources.py
	WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/glslang)

set(BUILD_SHARED_LIBS OFF CACHE BOOL "" FORCE)
set(BUILD_TESTING OFF CACHE BOOL "" FORCE)
set(ENABLE_OPT ON CACHE BOOL "" FORCE)
set(ENABLE_PCH ON CACHE BOOL "" FORCE)
set(ENABLE_CTEST OFF CACHE BOOL "" FORCE)
set(ENABLE_GLSLANG_BINARIES ON CACHE BOOL "" FORCE)
set(ENABLE_SPVREMAPPER ON CACHE BOOL "" FORCE)
set(BUILD_EXTERNAL ON CACHE BOOL "" FORCE)
set(ENABLE_HLSL ON CACHE BOOL "" FORCE)
set(USE_CCACHE ON CACHE BOOL "" FORCE)	

set(SKIP_GLSLANG_INSTALL ON CACHE BOOL "" FORCE)
set(SKIP_SPIRV_TOOLS_INSTALL ON CACHE BOOL "" FORCE)
set(SPIRV_HEADERS_SKIP_INSTALL ON CACHE BOOL "" FORCE)
set(SPIRV_HEADERS_SKIP_EXAMPLES ON CACHE BOOL "" FORCE)
set(SPIRV_SKIP_EXECUTABLES ON CACHE BOOL "" FORCE)
set(ENABLE_GLSLANG_INSTALL OFF CACHE BOOL "" FORCE)

add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/3rdparty/glslang EXCLUDE_FROM_ALL)

if (TARGET glslang)
	set_target_properties(glslang PROPERTIES FOLDER 3rdparty/Static/glslang)
endif()
if (TARGET GenericCodeGen)
	set_target_properties(GenericCodeGen PROPERTIES FOLDER 3rdparty/Static/glslang)
endif()
if (TARGET MachineIndependent)
	set_target_properties(MachineIndependent PROPERTIES FOLDER 3rdparty/Static/glslang)
endif()
if (TARGET OGLCompiler)
	set_target_properties(OGLCompiler PROPERTIES FOLDER 3rdparty/Static/glslang)
endif()
if (TARGET OSDependent)
	set_target_properties(OSDependent PROPERTIES FOLDER 3rdparty/Static/glslang)
endif()
if (TARGET SPIRV)
	set_target_properties(SPIRV PROPERTIES FOLDER 3rdparty/Static/glslang)
endif()
if (TARGET glslang-default-resource-limits)
	set_target_properties(glslang-default-resource-limits PROPERTIES FOLDER 3rdparty/Static/glslang)
endif()
if (TARGET HLSL)
	set_target_properties(HLSL PROPERTIES FOLDER 3rdparty/Static/glslang)
endif()
if (TARGET glslangValidator)
	set_target_properties(glslangValidator PROPERTIES FOLDER 3rdparty/Static/glslang/apps)
endif()
if (TARGET core_tables)
	set_target_properties(core_tables PROPERTIES FOLDER 3rdparty/Static/glslang)
endif()
if (TARGET enum_string_mapping)
	set_target_properties(enum_string_mapping PROPERTIES FOLDER 3rdparty/Static/glslang)
endif()
if (TARGET extinst_tables)
	set_target_properties(extinst_tables PROPERTIES FOLDER 3rdparty/Static/glslang)
endif()
if (TARGET spirv-tools-pkg-config)
	set_target_properties(spirv-tools-pkg-config PROPERTIES FOLDER 3rdparty/Static/glslang)
endif()
if (TARGET spirv-tools-shared-pkg-config)
	set_target_properties(spirv-tools-shared-pkg-config PROPERTIES FOLDER 3rdparty/Static/glslang)
endif()
if (TARGET spirv-remap)
	set_target_properties(spirv-remap PROPERTIES FOLDER 3rdparty/Static/glslang/tools)
endif()
if (TARGET spirv-tools-vimsyntax)
	set_target_properties(spirv-tools-vimsyntax PROPERTIES FOLDER 3rdparty/Static/glslang/SPIRV-Tools-utilities)
endif()
if (TARGET SPIRV-Tools-diff)
	set_target_properties(SPIRV-Tools-diff PROPERTIES FOLDER 3rdparty/Static/glslang/SPIRV-Tools-libraries)
endif()
if (TARGET SPIRV-Tools-link)
	set_target_properties(SPIRV-Tools-link PROPERTIES FOLDER 3rdparty/Static/glslang/SPIRV-Tools-libraries)
endif()
if (TARGET SPIRV-Tools-lint)
	set_target_properties(SPIRV-Tools-lint PROPERTIES FOLDER 3rdparty/Static/glslang/SPIRV-Tools-libraries)
endif()
if (TARGET SPIRV-Tools-opt)
	set_target_properties(SPIRV-Tools-opt PROPERTIES FOLDER 3rdparty/Static/glslang/SPIRV-Tools-libraries)
endif()
if (TARGET SPIRV-Tools-reduce)
	set_target_properties(SPIRV-Tools-reduce PROPERTIES FOLDER 3rdparty/Static/glslang/SPIRV-Tools-libraries)
endif()
if (TARGET SPIRV-Tools-shared)
	set_target_properties(SPIRV-Tools-shared PROPERTIES FOLDER 3rdparty/Static/glslang/SPIRV-Tools-libraries)
endif()
if (TARGET SPIRV-Tools-static)
	set_target_properties(SPIRV-Tools-static PROPERTIES FOLDER 3rdparty/Static/glslang/SPIRV-Tools-libraries)
endif()
if (TARGET spirv-as)
	set_target_properties(spirv-as PROPERTIES FOLDER 3rdparty/Static/glslang/SPIRV-Tools-executables)
endif()
if (TARGET spirv-cfg)
	set_target_properties(spirv-cfg PROPERTIES FOLDER 3rdparty/Static/glslang/SPIRV-Tools-executables)
endif()
if (TARGET spirv-diff)
	set_target_properties(spirv-diff PROPERTIES FOLDER 3rdparty/Static/glslang/SPIRV-Tools-executables)
endif()
if (TARGET spirv-dis)
	set_target_properties(spirv-dis PROPERTIES FOLDER 3rdparty/Static/glslang/SPIRV-Tools-executables)
endif()
if (TARGET spirv-link)
	set_target_properties(spirv-link PROPERTIES FOLDER 3rdparty/Static/glslang/SPIRV-Tools-executables)
endif()
if (TARGET spirv-lint)
	set_target_properties(spirv-lint PROPERTIES FOLDER 3rdparty/Static/glslang/SPIRV-Tools-executables)
endif()
if (TARGET spirv-opt)
	set_target_properties(spirv-opt PROPERTIES FOLDER 3rdparty/Static/glslang/SPIRV-Tools-executables)
endif()
if (TARGET spirv-reduce)
	set_target_properties(spirv-reduce PROPERTIES FOLDER 3rdparty/Static/glslang/SPIRV-Tools-executables)
endif()
if (TARGET spirv-val)
	set_target_properties(spirv-val PROPERTIES FOLDER 3rdparty/Static/glslang/SPIRV-Tools-executables)
endif()
if (TARGET spirv-tools-cpp-example)
	set_target_properties(spirv-tools-cpp-example PROPERTIES FOLDER 3rdparty/Static/glslang/SPIRV-Tools-examples)
endif()
if (TARGET spirv-tools-build-version)
	set_target_properties(spirv-tools-build-version PROPERTIES FOLDER 3rdparty/Static/glslang/SPIRV-Tools-build)
endif()
if (TARGET spirv-tools-header-DebugInfo)
	set_target_properties(spirv-tools-header-DebugInfo PROPERTIES FOLDER 3rdparty/Static/glslang/SPIRV-Tools-build)
endif()
if (TARGET spirv-tools-header-NonSemanticShaderDebugInfo100)
	set_target_properties(spirv-tools-header-NonSemanticShaderDebugInfo100 PROPERTIES FOLDER 3rdparty/Static/glslang/SPIRV-Tools-build)
endif()
if (TARGET spirv-tools-header-OpenCLDebugInfo100)
	set_target_properties(spirv-tools-header-OpenCLDebugInfo100 PROPERTIES FOLDER 3rdparty/Static/glslang/SPIRV-Tools-build)
endif()
if (TARGET spv-tools-cldi100)
	set_target_properties(spv-tools-cldi100 PROPERTIES FOLDER 3rdparty/Static/glslang/SPIRV-Tools-build)
endif()
if (TARGET spv-tools-clspvreflection)
	set_target_properties(spv-tools-clspvreflection PROPERTIES FOLDER 3rdparty/Static/glslang/SPIRV-Tools-build)
endif()
if (TARGET spv-tools-debuginfo)
	set_target_properties(spv-tools-debuginfo PROPERTIES FOLDER 3rdparty/Static/glslang/SPIRV-Tools-build)
endif()
if (TARGET spv-tools-shdi100)
	set_target_properties(spv-tools-shdi100 PROPERTIES FOLDER 3rdparty/Static/glslang/SPIRV-Tools-build)
endif()
if (TARGET spv-tools-spv-amd-gs)
	set_target_properties(spv-tools-spv-amd-gs PROPERTIES FOLDER 3rdparty/Static/glslang/SPIRV-Tools-build)
endif()
if (TARGET spv-tools-spv-amd-sb)
	set_target_properties(spv-tools-spv-amd-sb PROPERTIES FOLDER 3rdparty/Static/glslang/SPIRV-Tools-build)
endif()
if (TARGET spv-tools-spv-amd-sevp)
	set_target_properties(spv-tools-spv-amd-sevp PROPERTIES FOLDER 3rdparty/Static/glslang/SPIRV-Tools-build)
endif()
if (TARGET spv-tools-spv-amd-stm)
	set_target_properties(spv-tools-spv-amd-stm PROPERTIES FOLDER 3rdparty/Static/glslang/SPIRV-Tools-build)
endif()
if (TARGET SPVRemapper)
	set_target_properties(SPVRemapper PROPERTIES FOLDER 3rdparty/Static/glslang)
endif()

set(GLSLANG_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/3rdparty/glslang/include)
set(GLSLANG_LIBRARIES glslang SPIRV OGLCompiler OSDependent)
